// Generated by CoffeeScript 1.4.0
(function() {
  var ExceptIO, encode, exceptioScriptTag, httpRequest, parseError, script, scripts, url;

  scripts = function() {
    return document.getElementsByTagName('script');
  };

  exceptioScriptTag = function() {
    var script;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = scripts();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        script = _ref[_i];
        if (/exceptio.js/.test(script.src)) {
          _results.push(script);
        }
      }
      return _results;
    })())[0];
  };

  httpRequest = function() {
    if (window.XMLHttpRequest) {
      return new XMLHttpRequest();
    } else if (window.ActiveXObject) {
      return new ActiveXObject("Microsoft.XMLHTTP");
    }
  };

  encode = function(obj) {
    var prop, values;
    values = (function() {
      var _results;
      _results = [];
      for (prop in obj) {
        _results.push("error[" + (encodeURIComponent(prop)) + "]=" + (encodeURIComponent(obj[prop])));
      }
      return _results;
    })();
    return values.join("&");
  };

  url = function(application, appKey) {
    return "http://except.io/applications/" + application + "/errors?app_key=" + appKey;
  };

  parseError = function(error, file, line) {
    var backtrace, matches, type, _ref, _ref1, _ref2;
    type = error != null ? (_ref = error.constructor) != null ? _ref.name : void 0 : void 0;
    if (type !== 'String') {
      return [type, error.message, error.stack];
    }
    _ref1 = ['', error, 'No Backtrace'], type = _ref1[0], error = _ref1[1], backtrace = _ref1[2];
    if ((file != null) || (line != null)) {
      backtrace = "" + file + ":" + line;
    }
    if (matches = /^Uncaught ([^:]+):(.*)$/.exec(error)) {
      _ref2 = matches.slice(1, 3), type = _ref2[0], error = _ref2[1];
    }
    return [type, error, backtrace];
  };

  ExceptIO = {
    appKey: "",
    application: "",
    debug: false,
    environment: 'production',
    configure: function(appKey, application, debug, environment) {
      this.appKey = appKey;
      this.application = application;
      this.debug = debug != null ? debug : false;
      this.environment = environment != null ? environment : 'production';
    },
    log: function(error, file, line) {
      var backtrace, body, message, request_url, type, xhr, _ref;
      if (file == null) {
        file = error.file;
      }
      if (line == null) {
        line = error.line;
      }
      request_url = window.location.href;
      _ref = parseError(error, file, line), type = _ref[0], message = _ref[1], backtrace = _ref[2];
      body = encode({
        message: message,
        backtrace: backtrace,
        type: type,
        environment: this.environment,
        request_url: request_url
      });
      if (this.debug) {
        return console.log(url(this.application, this.appKey), body);
      } else {
        xhr = httpRequest();
        xhr.open('POST', url(this.application, this.appKey));
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        return xhr.send(body);
      }
    }
  };

  if (script = exceptioScriptTag()) {
    ExceptIO.configure(script.getAttribute('data-app-key'), script.getAttribute('data-application'), /true/.test(script.getAttribute('data-debug')));
  }

  window.onerror = function(message, file, line) {
    return ExceptIO.log(message, file, line);
  };

  window.ExceptIO = ExceptIO;

}).call(this);
